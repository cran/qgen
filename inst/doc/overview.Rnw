\documentclass[a4]{scrartcl}\usepackage{myR} %0.1-01\usepackage{myReport}\usepackage{paralist}%_________________________________ HYPERLINKS\usepackage{hyperref}%_________________________________ HYPHENATION%\VignetteIndexEntry{overview}%----------------------------------------------------------------------------------------------------\begin{document}\title{qgen:\\quantitative genetics using \R}\author{thomas.fabbro@unibas.ch}\date{}\maketitle%%\section*{Abstract}\texttt{qgen} is a collection of functions to analyse quantitative genetic data.It is especially helpful to perform parametric resampling of quantitative genetic data sets.Resampling allows \emph{first} to determine \emph{a priori} the expected variance of an estimator,\emph{second} for a given empirical data set to calculate bootstrap confidence intervals, and \emph{third} to evaluate different estimators and confidence intervals.The structure of the functions was kept ``simple'' which easily allows you to extend it with functions that calculate the statistics of your interest. The organisation of the functions together with some examples is described in this document, for descriptions of the individual functions refer to the manual.\section{The basic organisation}Most functions in \Rpack{qgen} are written to handle objects of class \Rclass{paraDATA} \figp{fig:organisation}.The name indicates that these objects can contain parameters sets as well as data sets.Nevertheless, in all standard applications they contain either a parameter set or a data set but never both.The possibility of having both together allows to change this behaviour easily, e.g., to calculate non--parametric bootstrap estimates, where a new data set is not simulated from parameters but sampled from an existing data set \chap{cha:outlook}.Starting an investigation needs that you first transform your biological parameters or your empirical data set into an object of class \Rclass{paraDATA}.There are two functions to do exactly this job, \Rfunc{the} and \Rfunc{emp}.The functions \Rfunc{est} and \Rfunc{sim} do not only take \Rclass{paraDATA}--objects as arguments but also return \Rclass{paraDATA}--objects.This allows to call these functions nested within each other in a flexible way.For example<<eval=FALSE, echo=TRUE>>=my.paraDATA.object <- the()est(sim(est(sim(est(sim(my.paraDATA.object))))))@ takes \verb|my.paraDATA.object| containing parameters, simulates a corresponding data set, estimates the parameters, simulates the data set, and so on.The functions called \Rfunc{stat...}(currently numbered), take the parameters from \Rclass{paraDATA}--object to calculate statistics, e.g., heritability.%The functions of \Rpack{qgen} allow you to analyse different kinds of quantitative genetic data sets.\begin{figure}[tbh]\centering\includegraphics[width=1\textwidth,angle=0]{fig/qgen_organisation.pdf}\caption{The organisation of the \Rpack{qgen}--package: Function names are denoted by slanted font.The triangles represent objects of the class \Robj{paraDATA}.All investigations start either with a set of biological parameters or with empirical data (round boxes).The functions \Rfunc{emp} and \Rfunc{the} help to bring them into the form of a \Robj{paraDATA}--object.The two ``core'' functions \Rfunc{sim}, \Rfunc{est} take \Robj{paraDATA}--object as argument and return a modified \Robj{paraDATA}--object.These functions \texttt{sim}ulate a data set from parameters, \texttt{est}imate parameter from a data set.The functions \Rfunc{stat...} take the estimated parameters from a \Robj{paraDATA}--object to calculate \texttt{stat}istics.To perform these steps in long sequences there are three additional functions \Rfunc{cal}, Rfunc{sta}, and \Rfunc{dis}.The \Rfunc{cal}--function helps you to organise the resampling and creates a object called \Robj{multi} (containing many \Robj{paraDATA}--objects).The \Rfunc{sta}--function takes then the desired \Rfunc{stat...}--function and evaluates the \Robj{multi}--object.The \Rfunc{dis}--function calculates bootstrap confidence intervals.\label{fig:organisation}}\end{figure}%__________\clearpage\section*{Resampling: the sampling tree}\Rpack{qgen} does not only allow to estimate parameters from data sets and to simulate data sets from parameters.It also allows to perform these steps in long sequences and at different levels \figp{fig:samplingtree}.\begin{figure}[tbh]\centering\includegraphics[width=1.0\textwidth,angle=0]{fig/FILEtree.pdf}\caption{An example of a ``sampling tree'': % represented  by one ``branch'' at every resampling level. The ``tips'' represent parameter sets (\Rclass{paraDATA}--objects).According to this parameter sets along every arrow a data set is simulated, which is used to estimate the parameters for its one ``tip''.The coloured bubbles show examples of ``branches'' together with their filename.}%Along every arrow a data set is simulated according to the parameter set and from this data set the parameters are estimated.\label{fig:samplingtree}\end{figure}\subsection*{The levels of resampling}Resampling can be done at three different levels,\begin{compactdesc}\item[T-level] contains always the population parameters,It exists only in theoretical investigations and is always represented by one ``tip'' only.\item[S-level] contains either estimated parameters from simulated data sets according to the population parameters or a single parameter set estimated from empirical data,\item[R-level] is used for calculating bootstrap statistics,\item[Q-level] allows the calculation of double-bootstrap statistics (it is not possible to sample out of the Q-level).\end{compactdesc}\subsection*{File organisation during resampling}At every level of resampling the ``sampling tree'' splits up into different ``branches''.The information of all ``tips'' of a ``branch'' are stored within one file (summarised in a \Robj{multi}--object).The name of each file tells which ``branch'' of the ``sampling tree'' it contains and how many ``tips'' this ``branch'' has.%The following list  descibes how this files are organised and what objects they contain.The following list describes all files created during an investigation with \Rpack{qgen}.\begin{compactdesc}\item[the.rda] A file created by \Rfunc{the} containing one object of class \Rclass{paraDATA} with an empty \Rclass{DATA}--slot.\item[emp.rda] A file created by \Rfunc{emp} containing an object of class \Rclass{paraDATA} with an empty \Rclass{para}--slot.\item[est.rda] A file created by \Rfunc{est} containing an object of class \Rclass{paraDATA} with an empty \Rclass{DATA}--slot.\item[multiTS\#\#\#\#.rda] A file created by \Rfunc{cal} containg an object of class \Rclass{multi} (the four--digit number indicates the number of ``tips'', \Rclass{paraDATA}--objects).\item[multiTS\#\#\#\#o\#\#\#\#R\#\#\#\#.rda] A file created by \Rfunc{cal} containing an object of class \Rclass{multi} \\example: multiTS0007o0057R0123.rda indicates that this file contains a ``branch'' at the \emph{``R-level''} with 123 ``tips''. This ``branch'' derived from the 7th out of 57 ``tips'' a the \emph{``S-level''}.\item[multiTS\#\#\#\#o\#\#\#\#R\#\#\#\#o\#\#\#\#Q\#\#\#\#.rda] A file created by \Rfunc{cal} containing an object of class \Rclass{multi} \\example: multiTS0007o0057R0001o0123Q0099.rda indicates that this file contains a ``branch'' at the \emph{``Q-level''} with 99 tips. This ``branch'' derived from the first out of 123 ``tips'' at the \emph{``R-level''} which derived from the 7th out of 57 ``tips'' at the \emph{``S-level''}.\end{compactdesc}% Along every arrow a data set is simulated and used to estimate the parmeters that are then saved in a \Robj{paraDATA} object at the ``tip''.% All \Robj{paraDATA}--objects of a ``branch'' are stored together as a \Robj{multi}--object in a file.% \subsection*{The ``sampling tree''}% \Rpack{qgen} splits the information from a resampling into different files.%%% \paragraph{Filenames}% At every level of resamping the  ``sampling tree'' splits up into several ``branches''.% All ``tips'' of a ``branch'' are stored within one file.% The name of a file tells us which ``branch'' of the ``sampling tree'' it contains and how many ``tips'' this branch has.% During the work with \Rpack{qgen} several files are generated.% All files are stored within the same path, which easily allows to archive the whole resampling of an investigation, e.g, in a tar archive.\section{Some examples}\vspace{10mm}\begin{minipage}[t][2cm][b]{\textwidth}	\includegraphics[width=0.3\linewidth]{fig/margin2.pdf}\hspace{1cm}	\begin{minipage}[b][2cm][c]{\textwidth}	{\textbf{\large{\emph{A priory} data simulation}}}	\end{minipage}\end{minipage}Before you start an experiment you probably would like to know how many replicates you have to take to get a sufficient accurate result.By taking reasonable biological parameters (additive, dominance, maternal, and environmental variance) and a sampling design (the number of replicates at every level, e.g, 100 sires, 6 dams each, and 3 individuals per dam) you can easily generate a large number of data sets.The function \Rfunc{the} helps you to bring your assumed biological parameters into an object of class \Robj{paraDATA}.The \Rfunc{sim} takes this object and samples a corresponding data set. The result is again stored in an objec of class \Robj{paraDATA}.This object is then run by the \Rfunc{est}--function, and afterwards by \Rfunc{stat...}--function  and you have the estimates.An example:<<the, eval=FALSE>>=stat1(est(sim(the(siN=100,daN=6,idN=3, additiveVar=100, dominanceVar=100, maternalVar=100, environmentalVar=100))))@To repeat this step several times there are the functions, \Rfunc{cal} and \Rfunc{sta} to call the individual steps in a sequence:<<the, eval=FALSE>>=parameters <- the(siN=100, daN=6, idN=3, additiveVar=100, dominanceVar=100, maternalVar=100, environmentalVar=100, file=TRUE)cal(filename="the.rda", repetitions=10)@A file is generated (\verb|"~/qgen/CALfile.r"|) that now has to be run line by line<<run, eval=FALSE>>=source("~/qgen/CALfile.r") # Be aware that this step takes long!!## load("~/qgen/multiTS0010.rda")@ After some time, depending on the number of resamples, you find a file containing the esimated parameters of all 10 resampled data sets\\(\verb|"~/qgen/multiTS0010.rda"|).<<dis, eval=FALSE>>=sta(filename="multiTS0010.rda", statistic.name=stat1)@ The function \Rfunc{sta} takes the \texttt{multiTS0010.rda} file and for every repetition the statistic (heritability for \Rfunc{stat1}) is calculated. The results can be summarised in several ways, e.g.,<<prin, eval=FALSE>>=load("/Desktop/myproject.qgen/statS.rda")print(stat.matrix)@\vspace{2cm}\begin{minipage}[t][2cm][b]{\textwidth}	\includegraphics[width=0.3\linewidth]{fig/margin1.pdf}\hspace{1cm}	\begin{minipage}[b][2cm][c]{\textwidth}	{\textbf{\large{Analysing an empirical data set}}}	\end{minipage}\end{minipage}The function \Rfunc{emp} helps you to transform your empirical data stored in a dataframe into an object of class \Robj{paraDATA}.This \Robj{paraDATA}--object is then analysed by the function \Rfunc{est} which estimates the variance components and stores them again in a \Robj{paraDATA}--object.The \Rfunc{stat...} function of your choice then takes this \Robj{paraDATA}--object and calculates the statistics, e.g., the \Rfunc{stat1} calculates heritability with confidence intervals.%<<emp, eval=FALSE>>=data(sinapis) # makes the dataframe "sinapis" availablea <- emp(data.use=sinapis[sinapis$fixedblock=="fb1" & sinapis$environment=="contr",], fixedblock.use="fixedblock", character.use="leafarea", environment.use="environment", sire.use="sire", dam.use="dam", individual.use="individual")b <- est(a)c <- stat1(b)print(c)@ and you receive the estimate for heritability and its confidence intervals.\vspace{2cm}\begin{minipage}[t][2cm][b]{\textwidth}	\includegraphics[width=0.3\linewidth]{fig/margin3.pdf}\hspace{1cm}	\begin{minipage}[b][2cm][c]{\textwidth}	{\textbf{\large{Bootstrap estimates}}}	\end{minipage}\end{minipage}The function \Rfunc{emp} helps you to transform your empirical data stored in a dataframe into an object of class \Robj{paraDATA}.This \Robj{paraDATA}--object is then analysed by the function \Rfunc{est} which estimates the variance components and stores them again in a \Robj{paraDATA}--object.The \Rfunc{stat...} function of your choice then takes this \Robj{paraDATA}--object and calculates the statistics, e.g., the \Rfunc{stat1} calculates heritability with confidence intervals.%<<emp, eval=FALSE>>=data(sinapis) # makes the dataframe "sinapis" availablea <- emp(data.use=sinapis[sinapis$fixedblock=="fb1" & sinapis$environment=="contr",], fixedblock.use="fixedblock", character.use="leafarea", environment.use="environment", sire.use="sire", dam.use="dam", individual.use="individual")b <- est(a, file=TRUE)cal(filename="est.rda", repetitions=5)source("~/qgen/CALfile.r") # Be aware that this step takes very long!!## load("~/qgen/multiTS0001.rda")## load("~/qgen/multiTS0001o0001R0005.rda")sta(filename="multiTS0001.rda", statistic.name=stat1)sta(filename="multiTS0001o0001R0005.rda", statistic.name=stat1)@ If you select a reasonable number of repetitions (at lest 100!) you can now calculate the bootstrap confidence intervals:<<dis, eval=FALSE>>=dis()@ and you receive the estimate for heritability and bootstrap confidence intervals (percentile, Basic, BCa).\section{Outlook \label{cha:outlook}}The functions of \Rpack{qgen} constrain their range of application in several ways.%The following list describes, how some of this constraints can be relaxed.\begin{compactdesc}\item[> 9999 resamples] The filenames reserve only four digits for numbering the different samples.By changing the internal function \Rfunc{leading} this behaviour can easily be changed simultaneously for all functions.Care has to be taken to ensure that the filenames do not become to long (depending on your OS)!%\item[non--parametric resampling] To save storage resources, only the estimated parameters are stored and the data sets are discharged.To change this behaviour, the function \Rfunc{est.R} has to be changed.%\end{compactdesc}\end{document} % Within the tree of resampling units, % At every level the tree has branches with a certain number of endings.% %% A file contains always the information from one branch.% %% Its name indicates to which level in the resampling hyrarchie this branch belongs, where this branch is rooted, and how mamy endings it has.% Storing all the information resulting from a resampling at different levels needs that the information is split up into different files.